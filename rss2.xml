<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Hongbin</title>
    <link>http://alayshchen.github.io/</link>
    <atom:link href="/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>个人博客</description>
    <pubDate>Fri, 19 May 2017 01:22:44 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>记录一次HomeKit智能家居实践</title>
      <link>http://alayshchen.github.io/2017/05/02/%E8%AE%B0%E5%BD%95%E4%B8%80%E6%AC%A1HomeKit%E6%99%BA%E8%83%BD%E5%AE%B6%E5%B1%85%E5%AE%9E%E8%B7%B5/</link>
      <guid>http://alayshchen.github.io/2017/05/02/%E8%AE%B0%E5%BD%95%E4%B8%80%E6%AC%A1HomeKit%E6%99%BA%E8%83%BD%E5%AE%B6%E5%B1%85%E5%AE%9E%E8%B7%B5/</guid>
      <pubDate>Tue, 02 May 2017 07:09:35 GMT</pubDate>
      <description>
      
        &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;想象一下，吃过晚饭，坐在沙发上，“嘿Siri，电视时间”，客厅灯关了，电视和电视盒子开了。过了很久，你困了，起身，“嘿Siri，准备睡觉”，
      
      </description>
      
      <content:encoded><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>想象一下，吃过晚饭，坐在沙发上，“嘿Siri，电视时间”，客厅灯关了，电视和电视盒子开了。过了很久，你困了，起身，“嘿Siri，准备睡觉”，卧室床头灯开了，电视和电视盒子关了，最后，你躺在床上，“嘿Siri，晚安”，随之你的家也开始休息。<br>  <img src="images/8.png" alt=""><img src="images/9.png" alt="">  </p>
<p>当然，你也可以想象一下这样的场景。<br><img src="images/0.png" alt="">  </p>
<h3 id="硬件"><a href="#硬件" class="headerlink" title="硬件"></a>硬件</h3><h5 id="树莓派3B-¥256"><a href="#树莓派3B-¥256" class="headerlink" title="树莓派3B (¥256)"></a>树莓派3B (¥256)</h5><p>  <img src="images/1.jpg" alt="树莓派">  </p>
<h5 id="易微联Wi-Fi智能插座-sonoff-s22-¥29-9"><a href="#易微联Wi-Fi智能插座-sonoff-s22-¥29-9" class="headerlink" title="易微联Wi-Fi智能插座(sonoff s22) (¥29.9)"></a>易微联Wi-Fi智能插座(sonoff s22) (¥29.9)</h5><p>  <img src="images/2.jpg" alt="sonoff S22">  </p>
<h5 id="sonoff-Wi-Fi智能开关改装件-¥29-9"><a href="#sonoff-Wi-Fi智能开关改装件-¥29-9" class="headerlink" title="sonoff Wi-Fi智能开关改装件 (¥29.9)"></a>sonoff Wi-Fi智能开关改装件 (¥29.9)</h5><p>  <img src="images/3.jpg" alt="sonoff 开关改装件">  </p>
<h5 id="BroadLink-RM-Pro-¥179"><a href="#BroadLink-RM-Pro-¥179" class="headerlink" title="BroadLink RM Pro (¥179)"></a>BroadLink RM Pro (¥179)</h5><p>  <img src="images/4.png" alt="BroadLink RM pro"></p>
<h3 id="软件"><a href="#软件" class="headerlink" title="软件"></a>软件</h3><h5 id="HomeAssistant"><a href="#HomeAssistant" class="headerlink" title="HomeAssistant"></a><a href="https://home-assistant.io" target="_blank" rel="external">HomeAssistant</a></h5><p>  HomeAssistant是运行在Python 3上的开源智能家居平台，能够跟踪和控制家中的智能设备，实现自动化控制。<br>  <a href="https://home-assistant.io/docs/hassbian/installation/" target="_blank" rel="external">安装教程</a>  </p>
<h5 id="HomeBridge"><a href="#HomeBridge" class="headerlink" title="HomeBridge"></a><a href="https://github.com/nfarina/homebridge" target="_blank" rel="external">HomeBridge</a></h5><p>  Homebridge是一种轻量级的NodeJS服务器, 模拟iOS HomeKit API, 让普通的 Wifi 设备也能接入  HomeKit 从而通过Siri控制。<br>  <a href="https://github.com/nfarina/homebridge/wiki/Running-HomeBridge-on-a-Raspberry-Pi" target="_blank" rel="external">安装教程</a></p>
<h5 id="homebridge-homeassistant"><a href="#homebridge-homeassistant" class="headerlink" title="homebridge-homeassistant"></a><a href="https://github.com/home-assistant/homebridge-homeassistant" target="_blank" rel="external">homebridge-homeassistant</a></h5><p>  安装：<code>npm install -g homebridge-homeassistant</code></p>
<h5 id="homebridge-broadlink-rm"><a href="#homebridge-broadlink-rm" class="headerlink" title="homebridge-broadlink-rm"></a><a href="https://github.com/lprhodes/homebridge-broadlink-rm" target="_blank" rel="external">homebridge-broadlink-rm</a></h5><p>  安装：<code>npm install -g homebridge-broadlink-rm</code>  </p>
<h3 id="接入"><a href="#接入" class="headerlink" title="接入"></a>接入</h3><h4 id="Sonoff设备"><a href="#Sonoff设备" class="headerlink" title="Sonoff设备"></a>Sonoff设备</h4><p>首先，按照<a href="http://wxuinew.coolkit.cc/wxmenu/platform_addDevice.html" target="_blank" rel="external">官方教程</a>，对sonoff设备进行设置。设置完成后，我们已经可以在易微联app中进行控制了。当然。我们要做的是在HomeAssistant中进行控制。目前网上所能找到的方法是对Sonoff开关进行改造，刷固件，<a href="http://v.ku6.com/show/rZPl4OoqBeZB6GjEUqoJvw...html?mobile" target="_blank" rel="external">Sonoff开关改造及刷机模式进入</a>，<a href="https://github.com/KmanOz/Sonoff-HomeAssistant" target="_blank" rel="external">Sonoff-HomeAssistant</a>，本来我当时也是打算照着视频教程做，无奈，淘宝买的电烙铁还在快递的路上，只好对易微联App逆一逆，以表敬意。<br>  我使用了 <a href="https://github.com/AlayshChen/XcodeAppPluginTemplate" target="_blank" rel="external">XcodeAppPluginTemplate</a> 创建工程，编译执行，可以看到，它实际上是套了app外壳的webview。<br>  <img src="images/5.png" alt="易微联UI Debug"><br>  控制台打印了不少有用信息，分析log可以得出大致的控制流程。  </p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">握手过程  </div><div class="line">2017-05-17 14:14:07.190 eWeLink[30093:2297910] service/websocket.js websocket open success</div><div class="line">2017-05-17 14:14:07.192 eWeLink[30093:2297910] service/device.js 开始发送握手协议 =========================================================</div><div class="line">2017-05-17 14:14:07.194 eWeLink[30093:2297910] service/websocket.js send:&#123;&quot;action&quot;:&quot;userOnline&quot;,&quot;version&quot;:6,&quot;imei&quot;:&quot;XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX&quot;,&quot;ts&quot;:&quot;1495001046&quot;,&quot;model&quot;:&quot;iPhone6,2&quot;,&quot;os&quot;:&quot;ios&quot;,&quot;romVersion&quot;:&quot;9.2&quot;,&quot;at&quot;:&quot;07a6925f4eacf232e712e4154358f568fc238849&quot;,&quot;userAgent&quot;:&quot;app&quot;,&quot;apikey&quot;:&quot;xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx&quot;,&quot;appid&quot;:&quot;xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx&quot;,&quot;nonce&quot;:&quot;xxxxxxxx&quot;,&quot;sequence&quot;:&quot;1495001046926&quot;,&quot;apkVesrion&quot;:&quot;1.8&quot;&#125;</div><div class="line">2017-05-17 14:14:07.198 eWeLink[30093:2297910] service/devices.js 服务器返回:&#123;&quot;error&quot;:0,&quot;apikey&quot;:&quot;xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx&quot;,&quot;config&quot;:&#123;&quot;hb&quot;:1,&quot;hbInterval&quot;:145&#125;,&quot;sequence&quot;:&quot;1495001046926&quot;&#125;</div><div class="line">2017-05-17 14:14:07.201 eWeLink[30093:2297910] service/device.js 握手协议发送完成,可以操作</div><div class="line">	</div><div class="line">操作过程</div><div class="line">2017-05-17 14:16:13.210 eWeLink[30093:2297910] service/websocket.js send:&#123;&quot;action&quot;:&quot;update&quot;,&quot;userAgent&quot;:&quot;app&quot;,&quot;apikey&quot;:&quot;xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx&quot;,&quot;deviceid&quot;:&quot;10000xxxxx&quot;,&quot;params&quot;:&#123;&quot;switch&quot;:&quot;on&quot;&#125;,&quot;sequence&quot;:&quot;1495001173130&quot;&#125;</div><div class="line">2017-05-17 14:16:14.016 eWeLink[30093:2297910] service/devices.js 服务器返回:&#123;&quot;error&quot;:0,&quot;deviceid&quot;:&quot;10000xxxxx&quot;,&quot;apikey&quot;:&quot;xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx&quot;,&quot;sequence&quot;:&quot;1495001173130&quot;&#125;</div><div class="line">	</div><div class="line">更新过程</div><div class="line">2017-05-17 14:17:13.815 eWeLink[30093:2297910] service/devices.js 设备更新参数信息::&#123;&quot;action&quot;:&quot;update&quot;,&quot;deviceid&quot;:&quot;10000xxxxx&quot;,&quot;apikey&quot;:&quot;xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx&quot;,&quot;userAgent&quot;:&quot;app&quot;,&quot;sequence&quot;:&quot;1495001233394&quot;,&quot;ts&quot;:0,&quot;params&quot;:&#123;&quot;deviceType&quot;:&quot;normal&quot;,&quot;mainSwitch&quot;:&quot;off&quot;,&quot;switch&quot;:&quot;off&quot;&#125;,&quot;tempRec&quot;:&quot;10000xxxxx&quot;&#125;</div></pre></td></tr></table></figure>
  <figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">+------------------------------------+</div><div class="line">|                                    |</div><div class="line">|                                    |</div><div class="line">|              Server                |</div><div class="line">|                                    |</div><div class="line">|                                    |</div><div class="line">++--------+----------+--------+------+</div><div class="line"> ^        ^          ^        |</div><div class="line"> |        |          |        |</div><div class="line"> |connect |handshake |control |update</div><div class="line"> |        |          |        |</div><div class="line"> |        |          |        |</div><div class="line"> |        |          |        v</div><div class="line">++--------+----------+--------+------+</div><div class="line">|                                    |</div><div class="line">|                                    |</div><div class="line">|                 App                |</div><div class="line">|                                    |</div><div class="line">|                                    |</div><div class="line">+------------------------------------+</div></pre></td></tr></table></figure>
<p>  由此，我用python写了<a href="https://github.com/AlayshChen/sonoff-server" target="_blank" rel="external">sonoff-server</a>，模拟app对易微联后台发送控制指令，接受相应的状态改变信息，并且封装成Restful接口给HomeAssistant调用。具体参数信息，可以通过抓包分析或者逆向得到。<br> 执行命令<code>python sonoff-server.py</code>，修改.homeassistant/configuration.yaml, 加入如下文本。其中<code>127.0.0.1:5000</code>为sonoff-server服务ip地址，<code>10000xxxxx 10000yyyyy</code>为sonoff设备编号。</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">switch:</div><div class="line"> - platform: rest</div><div class="line">   name: &quot;Bedroom Switch&quot;</div><div class="line">   body_on: &quot;on&quot;</div><div class="line">   body_off: &quot;off&quot;</div><div class="line">   resource: http://127.0.0.1:5000/switch/10000xxxxx</div><div class="line"> - platform: rest</div><div class="line">   name: &quot;Bedroom Lamp Switch&quot;</div><div class="line">   body_on: &quot;on&quot;</div><div class="line">   body_off: &quot;off&quot;</div><div class="line">   resource: http://127.0.0.1:5000/switch/10000yyyyy</div></pre></td></tr></table></figure>
<p> 然后，重启HomeAssistant <code>sudo systemctl restart home-assistant@homeassistant.service</code>，重启HomeBridge <code>sudo /etc/init.d/homebridge restart</code>，不出问题的话，就可以在iPhone中<code>家庭</code>app看到新增的设备了。</p>
<h4 id="BroadLink-Rm-Pro"><a href="#BroadLink-Rm-Pro" class="headerlink" title="BroadLink Rm Pro"></a>BroadLink Rm Pro</h4><p>对于普通的红外遥控设备，可以在<code>家庭</code>app中触发<code>Learn</code>开关，按下遥控键，就可以在homebridge的log中看到对应的指令码。但是奇怪的是BroadLink RM收不到小米遥控器的指令信息，然而易控app又确实可以控制小米盒子，所以，只好再逆一逆了。<br><img src="images/6.png" alt="易控UI Debug"><br>在<code>-[BLRMMiTVViewController miButtonClicked:]</code>打断点，按下开关键，断点触发，然后在调用objc_msgSend处打断点，通过<code>po (char *)$x1</code>查看调用的方法，最后，摸索出</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">-[BLRMMiTVViewController miButtonClicked:]</div><div class="line">	-[BLRMMiTVViewController sendCodeWithButtonIndex:]</div><div class="line">		-[BLFMDBSqlite getCodesByButtonID:]</div></pre></td></tr></table></figure>
<p>这一调用链，直觉告诉我<code>-[BLFMDBSqlite getCodesByButtonID:]</code>返回的结果就是我所需要的</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">(lldb) po [$x0 getCodesByButtonID:$x2]</div><div class="line">&lt;__NSArrayM 0x15fa56a30&gt;(</div><div class="line">&lt;BLCode: 0x15fa3ae10&gt;</div><div class="line">)</div><div class="line">(lldb) po [BLCode _shortMethodDescription]</div><div class="line">&lt;BLCode: 0x100dce5d8&gt;:</div><div class="line">in BLCode:</div><div class="line">	Properties:</div><div class="line">		@property (nonatomic) long codeID;  (@synthesize codeID = _codeID;)</div><div class="line">		@property (nonatomic) long buttonID;  (@synthesize buttonID = _buttonID;)</div><div class="line">		@property (retain, nonatomic) NSData* code;  (@synthesize code = _code;)</div><div class="line">		@property (retain, nonatomic) NSString* name;  (@synthesize name = _name;)</div><div class="line">		@property (nonatomic) long order;  (@synthesize order = _order;)</div><div class="line">		@property (nonatomic) long delay;  (@synthesize delay = _delay;)</div><div class="line">	Instance Methods:</div><div class="line">		- (void) setCodeID:(long)arg1; (0x1005a3b8c)</div><div class="line">		- (long) codeID; (0x1005a3b7c)</div><div class="line">		- (void) .cxx_destruct; (0x1005a3c8c)</div><div class="line">		- (void) dealloc; (0x1005a3a54)</div><div class="line">		- (id) init; (0x1005a3abc)</div><div class="line">		- (void) setName:(id)arg1; (0x1005a3c14)</div><div class="line">		- (id) name; (0x1005a3c04)</div><div class="line">		- (long) delay; (0x1005a3c6c)</div><div class="line">		- (void) setDelay:(long)arg1; (0x1005a3c7c)</div><div class="line">		- (id) code; (0x1005a3bbc)</div><div class="line">		- (void) setOrder:(long)arg1; (0x1005a3c5c)</div><div class="line">		- (long) order; (0x1005a3c4c)</div><div class="line">		- (void) setButtonID:(long)arg1; (0x1005a3bac)</div><div class="line">		- (long) buttonID; (0x1005a3b9c)</div><div class="line">		- (void) setCode:(id)arg1; (0x1005a3bcc)</div><div class="line">(NSObject ...)</div><div class="line"></div><div class="line">(lldb) po [0x15fa3ae10 code]</div><div class="line">&lt;26004c00 24111511 152d152d 1511152d 1511152d 1511152d 152d1601 5b241115 11152d15 2d151115 2d151115 2d151115 2d152d16 015b2411 1511152d 152d1511 152d1511 152d1511 152d152d 14000ccb 00000000 00000000 00000000 00000000 00000000&gt;</div></pre></td></tr></table></figure>
<p>已经得到了想要的指令了。<br>接下来，在 <code>.homebridge/config.json</code> 中添加</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">&#123;</div><div class="line">    &quot;platform&quot;: &quot;BroadlinkRM&quot;,</div><div class="line">    &quot;name&quot;: &quot;Broadlink RM&quot;,</div><div class="line">    &quot;accessories&quot;: [&#123;</div><div class="line">        &quot;name&quot;: &quot;MiBox&quot;,</div><div class="line">        &quot;type&quot;: &quot;switch&quot;,</div><div class="line">        &quot;data&quot;: &#123;</div><div class="line">          &quot;on&quot;: &quot;26004c0024111511152d152d1511152d1511152d1511152d152d16015b24111511152d152d1511152d1511152d1511152d152d16015b24111511152d152d1511152d1511152d1511152d152d14000ccb0000000000000000000000000000000000000000&quot;,</div><div class="line">          &quot;off&quot;: &quot;26004c0024111511152d152d1511152d1511152d1511152d152d16015b24111511152d152d1511152d1511152d1511152d152d16015b24111511152d152d1511152d1511152d1511152d152d14000ccb0000000000000000000000000000000000000000&quot;</div><div class="line">        &#125;</div><div class="line">    &#125;]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>本文记录的主要是接入硬件中遇到的问题，其他还有许多由于篇幅问题未做记录，但大部分都可以在官网给出的文档中查到。WWDC2017快了，HomeKit 和 SiriKit 会有什么更新，拭目以待。</p>
]]></content:encoded>
      
      <comments>http://alayshchen.github.io/2017/05/02/%E8%AE%B0%E5%BD%95%E4%B8%80%E6%AC%A1HomeKit%E6%99%BA%E8%83%BD%E5%AE%B6%E5%B1%85%E5%AE%9E%E8%B7%B5/#disqus_thread</comments>
    </item>
    
    <item>
      <title>如何愉快地在Mac上刷朋友圈</title>
      <link>http://alayshchen.github.io/2017/03/07/%E5%A6%82%E4%BD%95%E6%84%89%E5%BF%AB%E5%9C%B0%E5%9C%A8Mac%E4%B8%8A%E5%88%B7%E6%9C%8B%E5%8F%8B%E5%9C%88/</link>
      <guid>http://alayshchen.github.io/2017/03/07/%E5%A6%82%E4%BD%95%E6%84%89%E5%BF%AB%E5%9C%B0%E5%9C%A8Mac%E4%B8%8A%E5%88%B7%E6%9C%8B%E5%8F%8B%E5%9C%88/</guid>
      <pubDate>Mon, 06 Mar 2017 16:03:18 GMT</pubDate>
      <description>
      
      </description>
      
      <comments>http://alayshchen.github.io/2017/03/07/%E5%A6%82%E4%BD%95%E6%84%89%E5%BF%AB%E5%9C%B0%E5%9C%A8Mac%E4%B8%8A%E5%88%B7%E6%9C%8B%E5%8F%8B%E5%9C%88/#disqus_thread</comments>
    </item>
    
    <item>
      <title>没有微信小程序内测号？没关系</title>
      <link>http://alayshchen.github.io/2016/09/27/%E6%B2%A1%E6%9C%89%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%86%85%E6%B5%8B%E5%8F%B7%EF%BC%9F%E6%B2%A1%E5%85%B3%E7%B3%BB/</link>
      <guid>http://alayshchen.github.io/2016/09/27/%E6%B2%A1%E6%9C%89%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%86%85%E6%B5%8B%E5%8F%B7%EF%BC%9F%E6%B2%A1%E5%85%B3%E7%B3%BB/</guid>
      <pubDate>Tue, 27 Sep 2016 11:00:40 GMT</pubDate>
      <description>
      
      </description>
      
      <comments>http://alayshchen.github.io/2016/09/27/%E6%B2%A1%E6%9C%89%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%86%85%E6%B5%8B%E5%8F%B7%EF%BC%9F%E6%B2%A1%E5%85%B3%E7%B3%BB/#disqus_thread</comments>
    </item>
    
    <item>
      <title>我是如何利用Xcode调试开发微信消息预览插件的</title>
      <link>http://alayshchen.github.io/2016/02/26/%E6%88%91%E6%98%AF%E5%A6%82%E4%BD%95%E5%88%A9%E7%94%A8Xcode%E8%B0%83%E8%AF%95%E5%BC%80%E5%8F%91%E5%BE%AE%E4%BF%A1%E6%B6%88%E6%81%AF%E9%A2%84%E8%A7%88%E6%8F%92%E4%BB%B6%E7%9A%84/</link>
      <guid>http://alayshchen.github.io/2016/02/26/%E6%88%91%E6%98%AF%E5%A6%82%E4%BD%95%E5%88%A9%E7%94%A8Xcode%E8%B0%83%E8%AF%95%E5%BC%80%E5%8F%91%E5%BE%AE%E4%BF%A1%E6%B6%88%E6%81%AF%E9%A2%84%E8%A7%88%E6%8F%92%E4%BB%B6%E7%9A%84/</guid>
      <pubDate>Fri, 26 Feb 2016 02:43:34 GMT</pubDate>
      <description>
      
        &lt;p&gt;平时在微信使用时，经常出现这样的场景：阅读公众号文章时，突然一条好友消息来了。这时一直很纠结，我该停止阅读还是继续阅读。假如我可以预览消息的话，甚至回复消息后快速回来继续阅读。那太好不过了。&lt;br&gt;学习过iOS逆向开发的话，利用theos在越狱机器上实现还是可以的。但由于日常使用的是非越狱机器，鱼和熊掌都想要，只好在万能的google上寻找资料，终于找到了insert_dylib工具和念茜的博客上动态库注入相关知识。OK，开工！&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>平时在微信使用时，经常出现这样的场景：阅读公众号文章时，突然一条好友消息来了。这时一直很纠结，我该停止阅读还是继续阅读。假如我可以预览消息的话，甚至回复消息后快速回来继续阅读。那太好不过了。<br>学习过iOS逆向开发的话，利用theos在越狱机器上实现还是可以的。但由于日常使用的是非越狱机器，鱼和熊掌都想要，只好在万能的google上寻找资料，终于找到了insert_dylib工具和念茜的博客上动态库注入相关知识。OK，开工！</p>
<a id="more"></a>
<h3 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h3><p><img src="images/0.gif" alt="最终效果图"></p>
<h3 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h3><ol>
<li>公众号文章界面（网页）：收到消息后，显示消息内容</li>
<li>公众号文章界面（网页）：点击消息内容进入对应聊天界面</li>
<li>聊天界面：点击网页标志，跳回公众号文章界面（网页）</li>
</ol>
<h3 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h3><p>结合需求，需要hook的主要是微信消息通知Method，聊天界面ViewController，网页ViewController。利用工具class-dump, Hopper Disassembler很快定位出需要hook的微信代码，<code>-[CMessageMgr AsyncOnAddMsg:MsgWrap:]</code> <code>-[BaseMsgContentViewController viewDidLoad]</code> <code>-[MMWebViewController viewDidLoad]</code></p>
<h3 id="磨刀霍霍"><a href="#磨刀霍霍" class="headerlink" title="磨刀霍霍"></a>磨刀霍霍</h3><p>定位出hook代码段，接下来要做的就是写代码了。    </p>
<ol>
<li>Xcode现在支持建立动态库工程，但生成的是framework，可以通过修改工程文件下的project.pbxproj <code>productType = &quot;com.apple.product-type.framework&quot;; =&gt; productType = &quot;com.apple.product-type.library.dynamic&quot;</code><br><img src="images/1.png" alt="xcode建立framework图">  </li>
<li>利用iOSOpenDev也可以快速生成动态库工程。<br><img src="images/2.png" alt="iosopendev建立dylib图"></li>
</ol>
<p>这里注意要设置好签名证书，后续可能因为证书问题导致失败。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">- (void)cb_AsyncOnAddMsg:(NSString *)msg MsgWrap:(CMessageWrap *)wrap &#123;</div><div class="line">    [self cb_AsyncOnAddMsg:msg MsgWrap:wrap];</div><div class="line">    </div><div class="line">    [CBNewestMsgManager sharedInstance].username = msg;</div><div class="line">    [CBNewestMsgManager sharedInstance].content = wrap.m_nsContent;</div><div class="line">    </div><div class="line">    [[NSNotificationCenter defaultCenter] postNotificationName:CBWeChatNewMessageNotification object:nil];</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (void)cb_msgContentViewControllerViewDidLoad &#123;</div><div class="line">    [self cb_msgContentViewControllerViewDidLoad];</div><div class="line">    </div><div class="line">    UIButton *button = [[UIButton alloc] initWithFrame:CGRectMake(self.view.frame.size.width - 40, 74, 40, 40)];</div><div class="line">    UIImage *image = [UIImage imageWithContentsOfFile:[[NSBundle mainBundle] pathForResource:@&quot;WeChatMsgPreview_safari@2x&quot; ofType:@&quot;png&quot;]];</div><div class="line">    [button setImage:image forState:UIControlStateNormal];</div><div class="line">    [button addTarget:self action:@selector(backToWebViewController) forControlEvents:UIControlEventTouchUpInside];</div><div class="line">    [self.view addSubview:button];</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (void)cb_webViewControllerViewDidLoad &#123;</div><div class="line">    [self cb_webViewControllerViewDidLoad];</div><div class="line">    </div><div class="line">    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(cb_didReceiveNewMessage) name:CBWeChatNewMessageNotification object:nil];</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (void)cb_didReceiveNewMessage &#123;</div><div class="line">    NSString *username = [CBNewestMsgManager sharedInstance].username;</div><div class="line">    NSString *content = [CBNewestMsgManager sharedInstance].content;</div><div class="line">    CContactMgr *contactMgr = [[objc_getClass(&quot;MMServiceCenter&quot;) defaultCenter] getService:[objc_getClass(&quot;CContactMgr&quot;) class]];</div><div class="line">    CContact *contact = [contactMgr getContactByName:username];</div><div class="line">    </div><div class="line">    dispatch_async(dispatch_get_main_queue(), ^&#123;</div><div class="line">        NSString *text = [NSString stringWithFormat:@&quot;  %@: %@  &quot;, contact.m_nsNickName, content];</div><div class="line">        [CBMessageHud showHUDInView:self.view text:text target:self action:@selector(backToMsgContentViewController)];</div><div class="line">    &#125;);</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (void)backToWebViewController &#123;</div><div class="line">    NSArray *webViewViewControllers = [CBNewestMsgManager sharedInstance].webViewViewControllers;</div><div class="line">    if (webViewViewControllers) &#123;</div><div class="line">        [[objc_getClass(&quot;CAppViewControllerManager&quot;) getCurrentNavigationController] setViewControllers:webViewViewControllers animated:YES];</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (void)backToMsgContentViewController &#123;</div><div class="line">    // 返回聊天界面ViewController前记录当前navigationController的VC堆栈，以便快速返回</div><div class="line">    NSArray *webViewViewControllers = [objc_getClass(&quot;CAppViewControllerManager&quot;) getCurrentNavigationController].viewControllers;</div><div class="line">    [CBNewestMsgManager sharedInstance].webViewViewControllers = webViewViewControllers;</div><div class="line">    </div><div class="line">    // 返回rootViewController</div><div class="line">    UINavigationController *navVC = [objc_getClass(&quot;CAppViewControllerManager&quot;) getCurrentNavigationController];</div><div class="line">    [navVC popToRootViewControllerAnimated:NO];</div><div class="line">    </div><div class="line">    // 进入聊天界面ViewController</div><div class="line">    NSString *username = [CBNewestMsgManager sharedInstance].username;</div><div class="line">    CContactMgr *contactMgr = [[objc_getClass(&quot;MMServiceCenter&quot;) defaultCenter] getService:[objc_getClass(&quot;CContactMgr&quot;) class]];</div><div class="line">    CContact *contact = [contactMgr getContactByName:username];</div><div class="line">    MMMsgLogicManager *logicMgr = [[objc_getClass(&quot;MMServiceCenter&quot;) defaultCenter] getService:[objc_getClass(&quot;MMMsgLogicManager&quot;) class]];</div><div class="line">    [logicMgr PushOtherBaseMsgControllerByContact:contact navigationController:navVC animated:YES];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>最后关键的一步~</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">#define CBHookInstanceMethod(classname, ori_sel, new_sel) \</div><div class="line">\</div><div class="line">&#123; \</div><div class="line">Class class = objc_getClass(#classname); \</div><div class="line">Method ori_method = class_getInstanceMethod(class, ori_sel); \</div><div class="line">Method new_method = class_getInstanceMethod(class, new_sel); \</div><div class="line">method_exchangeImplementations(ori_method, new_method); \</div><div class="line">&#125; \</div><div class="line">\</div><div class="line"></div><div class="line">static void __attribute__((constructor)) initialize(void) &#123;</div><div class="line">    CBHookInstanceMethod(CMessageMgr, @selector(AsyncOnAddMsg:MsgWrap:), @selector(cb_AsyncOnAddMsg:MsgWrap:));</div><div class="line">    CBHookInstanceMethod(BaseMsgContentViewController, @selector(viewDidLoad), @selector(cb_msgContentViewControllerViewDidLoad));</div><div class="line">    CBHookInstanceMethod(MMWebViewController, @selector(viewDidLoad), @selector(cb_webViewControllerViewDidLoad));</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>好了，command＋B 成功生成动态库文件，下一步，利用insert_dylib修改微信可执行文件，重签名，生成新的微信app，安装到手机。嗯嗯，这样文章到这里就结束了～～<br>慢着，真正开发时哪会这么简单，代码一次成功。一旦代码出现问题，我们需要一直手动重复这样的工作：修改代码，生成dylib，修改微信可执行文件，重签名，生成新的app，安装到手机。<br>注意注意，博文的标题里有“调试”，调试！！！怎么做呢？</p>
<h3 id="偷天换日"><a href="#偷天换日" class="headerlink" title="偷天换日"></a>偷天换日</h3><p>细心观察可以发现  </p>
<ol>
<li>任意一个app工程，run后在Derived Data文件夹都有对应的.app文件  </li>
<li>在Build Phases中增加Run Script，可以在编译工程后执行自定义脚本。</li>
</ol>
<p>于是，一招偷天换日招数就想出来了（通过脚本，在编译工程后，利用新生成的动态库生成WeChat.app, 替换原有目录下的app文件）</p>
<ol>
<li>在原有工程中增加Application Target</li>
<li>在Build Phases中设置Target Dependencies，增加dylib，确保每次run app都会编译最新的dylib<br><img src="images/3.png" alt="工程设置图">  </li>
<li>然后增加Run Script（修改微信可执行文件，重签名，生成新的app）<br>接下来的事情（安装app，打开手机app，lldb调试）就交给Xcode做了。</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">#!/bin/bash</div><div class="line"></div><div class="line">BUNDLEIDENTIFIER=com.tencent.xin</div><div class="line">APPLICATIONIDENTIFIER=***.$&#123;BUNDLEIDENTIFIER&#125;</div><div class="line">WECHATFILEPATH=***/apps/WeChat</div><div class="line">LIBNAME=$(find *.dylib)</div><div class="line">TEMPDIR=$(mktemp -d)</div><div class="line">ORIGINDIR=$(pwd)</div><div class="line"></div><div class="line"># 0.get argv</div><div class="line"></div><div class="line">if [ x$1 != x ]</div><div class="line">then</div><div class="line">	BUNDLEIDENTIFIER=$1</div><div class="line">fi</div><div class="line"></div><div class="line"># 1.unzip ipa</div><div class="line"></div><div class="line">if [ $arch == &quot;arm64&quot; ]</div><div class="line">then</div><div class="line">unzip -qo $&#123;WECHATFILEPATH&#125;/WeChat-dump-arm64.ipa -d $TEMPDIR</div><div class="line">else</div><div class="line">unzip -qo $&#123;WECHATFILEPATH&#125;/WeChat-dump-armv7.ipa -d $TEMPDIR</div><div class="line">fi</div><div class="line"></div><div class="line"># 2.copy files</div><div class="line">cp $&#123;WECHATFILEPATH&#125;/embedded.mobileprovision $TEMPDIR/</div><div class="line">cp $&#123;WECHATFILEPATH&#125;/entitlements.plist $TEMPDIR/</div><div class="line">cp $&#123;LIBNAME&#125; $TEMPDIR/</div><div class="line"></div><div class="line"># 3.resign</div><div class="line">cd $TEMPDIR</div><div class="line">plutil -replace application-identifier -string $&#123;APPLICATIONIDENTIFIER&#125; entitlements.plist</div><div class="line">plutil -replace CFBundleIdentifier -string $&#123;BUNDLEIDENTIFIER&#125; Payload/WeChat.app/Info.plist</div><div class="line"></div><div class="line">mv $&#123;LIBNAME&#125; Payload/WeChat.app/</div><div class="line">insert_dylib --all-yes @executable_path/$&#123;LIBNAME&#125; Payload/WeChat.app/WeChat</div><div class="line">mv Payload/WeChat.app/WeChat_patched Payload/WeChat.app/WeChat</div><div class="line">chmod +x Payload/WeChat.app/WeChat</div><div class="line"></div><div class="line">rm -rf Payload/WeChat.app/_CodeSignature</div><div class="line">rm -rf Payload/WeChat.app/PlugIns</div><div class="line">rm -rf Payload/WeChat.app/Watch</div><div class="line">cp embedded.mobileprovision Payload/WeChat.app/</div><div class="line">codesign -fs &quot;iPhone Developer: *** (***)&quot; --no-strict --entitlements=entitlements.plist Payload/WeChat.app/$&#123;LIBNAME&#125;</div><div class="line">codesign -fs &quot;iPhone Developer: *** (***)&quot; --no-strict --entitlements=entitlements.plist Payload/WeChat.app</div><div class="line"></div><div class="line"># 4.end</div><div class="line"></div><div class="line">mv Payload/WeChat.app $&#123;ORIGINDIR&#125;</div><div class="line">rm -rf $&#123;TEMPDIR&#125;</div></pre></td></tr></table></figure>
<p><img src="images/4.png" alt="调试效果图"></p>
<h3 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h3><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">dyld: Library not loaded: @executable_path/libWeChatMsgPreview.dylib</div><div class="line">  Referenced from: /var/mobile/Containers/Bundle/Application/55148CD1-0D6E-4F6B-B55C-08261695B408/WeChat.app/WeChat</div><div class="line">  Reason: image not found</div></pre></td></tr></table></figure>
<p>原因：没拷贝libWeChatMsgPreview.dylib到WeChat.app目录下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">dyld: Library not loaded: @executable_path/libWeChatMsgPreview.dylib</div><div class="line">  Referenced from: /var/mobile/Containers/Bundle/Application/F62EF4DE-7A8E-4564-8839-7FED32FB0927/WeChat.app/WeChat</div><div class="line">  Reason: no suitable image found.  Did find:</div><div class="line">	/var/mobile/Containers/Bundle/Application/F62EF4DE-7A8E-4564-8839-7FED32FB0927/WeChat.app/libWeChatMsgPreview.dylib: mmap() errno=1 validating first page of &apos;/var/mobile/Containers/Bundle/Application/F62EF4DE-7A8E-4564-8839-7FED32FB0927/WeChat.app/libWeChatMsgPreview.dylib&apos;</div><div class="line">	/private/var/mobile/Containers/Bundle/Application/F62EF4DE-7A8E-4564-8839-7FED32FB0927/WeChat.app/libWeChatMsgPreview.dylib: mmap() errno=1 validating first page of &apos;/private/var/mobile/Containers/Bundle/Application/F62EF4DE-7A8E-4564-8839-7FED32FB0927/WeChat.app/libWeChatMsgPreview.dylib&apos;</div></pre></td></tr></table></figure>
<p>原因：签名不对，需保持重签名时<code>codesign -fs &quot;iPhone Developer: *** (***)&quot; --no-strict --entitlements=entitlements.plist Payload/WeChat.app/${LIBNAME}
codesign -fs &quot;iPhone Developer: *** (***)&quot; --no-strict --entitlements=entitlements.plist Payload/WeChat.app</code>证书一致  </p>
<p>脚本中涉及到的WeChat-dump-arm64.ipa需要从越狱机器中提取。<a href="http://alayshchen.github.io/2015/11/05/Resign-AppStore-App/">对App Store App进行重签名–解密[上]</a></p>
<h3 id="相关资料"><a href="#相关资料" class="headerlink" title="相关资料"></a>相关资料</h3><p><a href="https://github.com/Tyilo/insert_dylib" target="_blank" rel="external">insert_dylib</a><br><a href="http://www.cocoachina.com/industry/20140211/7800_4.html" target="_blank" rel="external">iOS安全攻防（十二）：iOS7的动态库注入</a></p>
]]></content:encoded>
      
      <comments>http://alayshchen.github.io/2016/02/26/%E6%88%91%E6%98%AF%E5%A6%82%E4%BD%95%E5%88%A9%E7%94%A8Xcode%E8%B0%83%E8%AF%95%E5%BC%80%E5%8F%91%E5%BE%AE%E4%BF%A1%E6%B6%88%E6%81%AF%E9%A2%84%E8%A7%88%E6%8F%92%E4%BB%B6%E7%9A%84/#disqus_thread</comments>
    </item>
    
    <item>
      <title>对App Store App进行重签名--解密</title>
      <link>http://alayshchen.github.io/2015/11/05/%E5%AF%B9App-Store-App%E8%BF%9B%E8%A1%8C%E9%87%8D%E7%AD%BE%E5%90%8D-%E8%A7%A3%E5%AF%86/</link>
      <guid>http://alayshchen.github.io/2015/11/05/%E5%AF%B9App-Store-App%E8%BF%9B%E8%A1%8C%E9%87%8D%E7%AD%BE%E5%90%8D-%E8%A7%A3%E5%AF%86/</guid>
      <pubDate>Thu, 05 Nov 2015 13:45:41 GMT</pubDate>
      <description>
      
        &lt;h3 id=&quot;工具&quot;&gt;&lt;a href=&quot;#工具&quot; class=&quot;headerlink&quot; title=&quot;工具&quot;&gt;&lt;/a&gt;工具&lt;/h3&gt;&lt;p&gt;Clutch &lt;a href=&quot;https://github.com/KJCracks/Clutch&quot; target=&quot;_blank&quot; re
      
      </description>
      
      <content:encoded><![CDATA[<h3 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h3><p>Clutch <a href="https://github.com/KJCracks/Clutch" target="_blank" rel="external">https://github.com/KJCracks/Clutch</a></p>
<p>dumpdecrypted <a href="https://github.com/stefanesser/dumpdecrypted" target="_blank" rel="external">https://github.com/stefanesser/dumpdecrypted</a></p>
<p>说明<br>dumpdecrypted需要手动解密可执行文件，并对解密结果进行瘦身，再拷贝资源文件构建ipa包。<br>Clutch支持解密可执行文件或ipa，使用起来比较简单(一条龙服务，完成了1中的所有步骤)。<br>完全手动解密的做法在《iOS应用安全攻防实战》中的“加密的二进制文件”有详细介绍。</p>
<h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>将应用程序运行（系统在此前会解密程序），将内存中的代码转存为另外一个可执行文件。<br>注意<br>通过dumpdecrypted得到的可执行文件其实不是完全解密过的，机器是arm64的话就只能解密arm64那部分。<br>通过命令<br>lipo -thin arm64 <em>.decrypted -o </em>-arm64.decrypted可获得纯净的可执行文件。</p>
<h3 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h3><h4 id="Clutch"><a href="#Clutch" class="headerlink" title="Clutch"></a>Clutch</h4><ol>
<li><p>查看应用列表<br>命令: Clutch -i<br><img src="images/0.png" alt=""></p>
</li>
<li><p>dump应用<br>命令: Clutch -d &lt;应用编号&gt;</p>
</li>
</ol>
<p><img src="images/1.png" alt=""></p>
<ol>
<li>dumping~~成功后可在/private/var/mobile/Documents/Dumped/目录下看到dump的ipa包.</li>
</ol>
<p><img src="images/2.png" alt=""></p>
<h4 id="dumpdecrypted"><a href="#dumpdecrypted" class="headerlink" title="dumpdecrypted"></a>dumpdecrypted</h4><ol>
<li>利用Cycript找到程序Documents文件夹<br>命令: cycript -p 二进制文件名(通过px ax得到)<br>[[NSFileManager defaultManager] URLsForDirectory:NSDocumentDirectory inDomains:NSUserDomainMask][0]<br><img src="images/3.png" alt=""></li>
<li><p>进入Documents文件夹，准备dump<br><img src="images/4.png" alt=""><br><img src="images/5.png" alt=""></p>
</li>
<li><p>对dump结果进行净化<br><img src="images/6.png" alt=""></p>
</li>
<li><p>拷贝应用程序文件夹 如上中的/var/mobile/Containers/Bundle/Application/E359F7D8-8769-4A2F-B12E-1F3EEB34E719/文件夹， 得到<br><img src="images/7.png" alt=""></p>
</li>
<li><p>将dump得到的WeChat-arm64.decrypted重命名为WeChat 替换WeChat.app里的WeChat 建立Payload文件夹 放进WeChat.app 得到目录<br><img src="images/8.png" alt=""></p>
</li>
<li><p>执行命令zip -qry WeChat.ipa Payload/WeChat.app得到ipa包 放到越狱机器上安装(ipainstaller) 什么？！安装失败？！查看log 嗯～签名验证失败。别担心，面包会有的。<br><img src="images/9.png" alt=""></p>
</li>
</ol>
]]></content:encoded>
      
      <comments>http://alayshchen.github.io/2015/11/05/%E5%AF%B9App-Store-App%E8%BF%9B%E8%A1%8C%E9%87%8D%E7%AD%BE%E5%90%8D-%E8%A7%A3%E5%AF%86/#disqus_thread</comments>
    </item>
    
  </channel>
</rss>
